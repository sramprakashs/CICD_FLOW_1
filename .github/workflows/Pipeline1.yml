name: Python Applications CI/CD
on:
  push:
    branches:
      - main
  workflow_dispatch: null
  pull_request:
    branches:
      - main
jobs:
  build-and-scan:
    runs-on: ubuntu-latest
    env:
      DOCKER_IMAGE: ramprakashs/pythonapp
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build Docker image
        run: |
          docker build -t $DOCKER_IMAGE:${{ github.sha }} .
          docker tag $DOCKER_IMAGE:${{ github.sha }} $DOCKER_IMAGE:latest
      - name: Push Docker image
        run: |
          docker push $DOCKER_IMAGE:${{ github.sha }}
          docker push $DOCKER_IMAGE:latest
      - name: Official SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v3.0.0
        with:
          projectBaseDir: .
          args: >
            -Dsonar.projectKey=hackathon-proj -Dsonar.host.url=${{ env.SONAR_HOST_URL
            }} -Dsonar.login=${{ env.SONAR_TOKEN }}
            -Dsonar.working.directory=./.scannerwork
      - name: Print SonarQube Logs
        run: >
          ls -al .scannerwork
          cat .scannerwork/report-task.txt || echo "report-task.txt not found"
      - name: Intall JQ
        run:
         sudo apt-get update && sudo apt-get install -y jq
      - name: SonarQube Quality Gate Check 
        id: sonarqube-quality-gate-check
        uses: SonarSource/sonarqube-quality-gate-action@v1.1.0
        # Force to fail step after specific time.
        timeout-minutes: 5
        env:
         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
         SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }} #OPTIONAL
  
    # Optionally you can use the output from the Quality Gate in another step.
    # The possible outputs of the `quality-gate-status` variable are `PASSED`, `WARN` or `FAILED`.
      - name: "Example show SonarQube Quality Gate Status value"
        run: echo "The Quality Gate status is ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: bayertest
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Build, tag, and push docker image to Amazon ECR Public
        env:
          REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
          REPOSITORY: bayerecr
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t bayerecr .
          docker tag bayerecr:latest public.ecr.aws/i1i2o2v2/bayerecr:latest
          docker push public.ecr.aws/i1i2o2v2/bayerecr:latest
        #  docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
        # docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG          
      - name: Install kubectl
        uses: azure/setup-kubectl@v2.0
        with:
           version: 'v1.24.0' # default is latest stable
        id: install
      - name: Update kube config
        run: aws eks update-kubeconfig --region us-east-1 --name hackathon-k8s
      - name: Deploy to EKS
        run: |
          kubectl apply -f deployment.yaml
          kubectl apply -f service.yaml
